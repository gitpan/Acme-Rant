NAME
    Acme::Rant - Extends Perl's Ability to Let You Rant

SYNOPSIS
        use Acme::Rant;

        my (@#%@-ing @list) = qw[foo];

        print the $#@%-ing @list, "\n";

        if ( $list[0] eq 'foo' ) {
            !*%^-you() and @#%-me ;
        }

        if ( @list < 2 ) {
            die what the @#$%, RANT {
                What the heck do you think you're doing?!
            };
        }

DESCRIPTION
    "Acme::Rant" implements an infinite (well, max(N) for very large values
    of "N") number of functions that are exported by default. Each of these
    functions give you a unique ability to vent Acme::Rant over your code.

  Parameters
    If the function is called with parameters, those parameters will be
    returned in a list. If your function was called with zero parameters, it
    will return true. Remember that these are functions and may require
    parenthesis to disambiguate meaning and context.

  Context
    Context is a bit different for these venting functions. Void context
    refers to an instance when your frustrations should not do anything,
    most often when venting just after keywords like "my", "use", "sub", and
    so on. Other contexts work as described in "Parameters".

  Syntax
    The core functions are named with the following list of characters.

        !@#\$%^&*_?

    The core function name may have a suffix of any alpha characters,
    denoted by a leading dash ("-").

        #@$%-it

    There are a number of possibilities for prefixing the core function
    name. First is the word "the" which may itself be prefixed by one of the
    six questions "who", "what", "when", "why", "how", and "where".

        the #@$%?
        what the %@#$
        why the &^%@-ing $dog

    The possible combinations are most certainly not endless, but it will
    take a while to get there.

  Ranting
    You may go futher off the deep end by ranting at will. It is an
    excellent form of documentation.

        RANT {
            So, you decided it would be a good idea to return undef
            from your method call and make me lookup a package
            variable to get the data?!  You so stupid!
        }

THANKS
    Like so many modules, this has been inspired by Damian Conway. Not only
    inspired, but concieved, thunk up, all but written by Damian Conway.

        what the #!@$, RANT {
            SO THANKS A LOT DAMIAN!
        };

AUTHOR
    Casey West, <casey@geeknest.com>

COPYRIGHT
    Copyright (c) 2003 Casey West <casey@geeknest.com>. All rights reserved.
    This program is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

